20. Опишите назначение репозитория проекта, систем контроля версий.
Репозитории - хранилище информации, связанной с проектом разработки программного продукта в течение всего его жизненного цикла.
Системы управления версиями (контроля версий)–программное обеспечение, предназначенное для отслеживания изменений между различными версиями файловых документов и разделения доступа к ним. Система управления версиями позволяет хранить несколько версий одного и того же документа, при необходимости, возвращаться к более ранним версиям, определять, кто и когда сделал то или иное изменение и т.д. 
21. Опишите систему контроля версий Git, её характерные особенности.
Система контроля версий — это система, записывающая изменения в файл или набор файлов в течение времени и позволяющая вернуться позже к определённой версии.
Системы контроля версий, как правило, отслеживают только изменения (дельты) между версиями файлов (а не сами полные версии), что позволяет эффективно использовать дисковое пространство. 
Часто бывает, что над одним проектом одновременно работают несколько человек. Если два человека изменяют один и тот же файл, то один из них может случайно отменить изменения, сделанные другим. Системы управления версиями отслеживают такие конфликты и предлагают средства их решения. Большинство систем может автоматически объединить (слить) изменения, сделанные разными разработчиками. Однако, такое автоматическое объединение изменений, обычно, возможно только для текстовых файлов и при условии, что изменялись разные (непересекающиеся) части этого файла. Если автоматическое объединение выполнить не удалось, система может предложить решить проблему вручную.
Многие системы управления версиями предоставляют ряд других возможностей:
1. Позволяют создавать разные варианты одного документа, т. н. ветки, с общей историей изменений до точки ветвления и с разными – после неё.
2. Дают возможность узнать, кто и когда добавил или изменил конкретную строку кода в файле.
3. Ведут журнал изменений, в который пользователи могут записывать информацию о том, что и почему они изменили в данной версии.
4. Контролируют права доступа пользователей, разрешая или запрещая чтение или изменение информации, в зависимости от того, кто запрашивает это действие.

Системы контроля версий бывают локальными, централизованными или распределёнными.
Локальная система хранит файлы на одном устройстве, централизованная использует общий сервер, а распределённая — общее облачное хранилище и локальные устройства участников команды. В локальной системе удобно работать с большими проектами, но сложно взаимодействовать с удалённой командой.
В централизованной системе налажена удалённая работа, но всё привязано к одному серверу. Любой сбой или взлом может повредить файлы проекта.
В распределённой системе налажена удалённая работа. Если с файлами основного репозитория что-то случится — проект легко восстановить из копии любого участника команды.
22. Опишите различия между понятиями staging, commit и stash в системе контроля версий Git.
- Область подготовленных изменений (staging area) - область куда попадают изменения(файлы), которые надо включить в коммит. git staging — область, отслеживаемая git, в которой находятся файлы еще не попавшие в commit.
- Команда git commit делает для проекта снимок текущего состояния изменений, добавленных в раздел проиндексированных файлов. Такие подтвержденные снимки состояния можно рассматривать как «безопасные» версии проекта — Git не будет их менять, пока вы явным образом не попросите об этом. Перед выполнением команды git commit необходимо использовать команду git add, чтобы добавить в проект («проиндексировать») изменения, которые будут сохранены в коммите.
Коммиты — основные конструктивные элементы временной шкалы проекта Git. Их можно рассматривать как снимки состояния или контрольные точки на временной шкале проекта Git. Коммиты создаются с помощью команды git commit, которая делает снимок состояния проекта на текущий момент времени.
- Добавить изменения в staging area - git add <имя файла> или git add * если надо включить все изменения.
Команда git stash позволяет на время «сдать в архив» (или отложить) изменения, сделанные в рабочей копии, чтобы вы могли применить их позже. Откладывание изменений полезно, если вам необходимо переключить контекст и вы пока не готовы к созданию коммита.

23. Перечислите команды для отображения истории коммитов, создания коммита, ветки.
Команда для отображения истории коммитов - git log 
создания коммита - git commit
ветки - git branch (git checkout – для перехода по веткам)
24. Перечислите команды для перехода к определённому коммиту и его отмены в системе контроля версия Git.
команды для перехода к определённому коммиту - git checkout
Отмена коммита - git revert (Git создаст новый коммит с операцией, обратной последнему коммиту. В текущую историю ветки будет добавлен новый коммит)
История коммитов будет сброшена до указанного коммита - git reset --hard
25. Опишите процесс подключения удалённого репозитория к локальному репозиторию в качестве origin в Git.
Git remote add origin https://github.com/... (url) - Добавление удаленного репозитория к существующему локальному
Чтобы подключаться по HTTPS , вместо пароля нужно использовать персональный токен.
Git pull origin master – получить данные
Git push -u origin master – отправка данных
26. Перечислите команды, которые используются для синхронизации локального и удаленного
репозитория в Git.
Git pull origin master – получить данные
Git push -u origin master – отправка данных
