7. Опишите назначение универсального языка моделирования UML.
UML означает Унифицированный язык моделирования. Это язык для моделирования программных решений, структур приложений, поведения систем и бизнес-процессов.
Структурные диаграммы
•	Диаграмма классов
•	Диаграмма компонентов
•	Диаграмма развертывания
•	Диаграмма объектов
•	Диаграмма пакета
•	Диаграмма профиля
•	Диаграмма композитной структуры
Поведенческие диаграммы
•	Диаграмма вариантов использования (use case)
•	Диаграмма деятельности (Activity)
•	Диаграмма машины состояний
•	Диаграмма последовательности (Sequence)
•	Диаграмма связи
•	Диаграмма обзора взаимодействия
•	Временная диаграмма

8. Опишите тип и назначение диаграммы активностей (activity) UML.
Диаграмма активностей. Это поведенческая диаграмма, которая иллюстрирует поток деятельности через систему. Также могут быть использованы для отображения потока событий в бизнес-процессе. С помощью диаграммы активностей мы описываем последовательность действий для каждого прецедента, необходимая для достижения поставленной цели. 
Диаграмма представляет собой блок-схему, которая наглядно показывает, как поток управления переходит от одной деятельности к другой.
Активности на диаграмме “разбросаны” по беговым дорожкам, каждая из которых соответствует поведению одного из объектов (например, клиента, менеджера, веб-сервера, сервера БД и т.п.). Благодаря этому легко определить, каким из объектов выполняется каждая из активностей. Дорожка - часть области диаграммы деятельности, на которой отображаются только те активности, за которые отвечает конкретный объект. Предназначены дорожки для разбиения диаграммы в соответствии с распределением ответственности за действия. Имя дорожки может означать роль или объект, которому она соответствует. 
9. Опишите тип и назначение диаграммы последовательности (sequence) UML.
Диаграмма последовательности предназначена для моделирования взаимодействия объектов системы во времени, а также обмена сообщениями между ними. 
Основными элементами диаграммы последовательности являются обозначения объектов (прямоугольники), вертикальные линии (англ. lifeline), отображающие течение времени при деятельности объекта, и стрелки, показывающие выполнение действий объектами. На данной диаграмме объекты располагаются слева направо.
10. Опишите тип и назначение диаграммы классов UML.
Диаграмма классов предназначена для представления внутренней структуры программы в виде классов и связей между ними.
Графически класс изображается в виде прямоугольника, разделенного на 3 блока горизонтальными линиями:

•	имя класса
•	атрибуты (свойства) класса
•	операции (методы) класса.
 
Для атрибутов и операций может быть указан один из трех типов видимости:

•	— private (частный)
•	# — protected (защищенный)
•	+ — public (общий)

Существует четыре типа связей в UML:

•	Зависимость
•	Ассоциация
•	Обобщение
•	Реализация
11. Опишите тип и назначение диаграммы вариантов использования (use case) UML.
Диаграммы Use case дают графический обзор участников системы, различных функций, необходимых этим участникам, и того, как эти различные функции взаимодействуют. С помощь диаграммы прецедентов (вариантов использования) выявляются основные пользователи системы и задачи, которые данная система должна решать. 

12. Опишите архитектурный паттерн MVC, его назначение, применимость и основные
компоненты.
Model, View, Controller (MVC) — шаблон (паттерн) программирования, разделяющий архитектуру приложения на три модуля: модель (Model), представление (View), контроллер (Controller). Этот паттерн разработки нужен для того, чтобы разделить логические части приложения и создавать их отдельно друг от друга. То есть писать независимые блоки кода, которые можно как угодно менять, не затрагивая другие. 
Модель (Model). Это основная логика приложения. Отвечает за данные, методы работы с ними и структуру программы.
Представление (View). Задача компонента — визуализация информации, которую он получает от модели. Отвечает за взаимодействие с пользователем.
Контроллер (Controller). Он обеспечивает взаимодействие с системой: обрабатывает действия пользователя, проверяет полученную информацию и передает ее модели. Контроллер определяет, как приложение будет реагировать на действия пользователя. Также контроллер может отвечать за фильтрацию данных и авторизацию.

